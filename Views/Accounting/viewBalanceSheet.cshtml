@model IEnumerable<oa.Models.AccountsModel>

@{
    ViewData["Title"] = "viewBalanceSheet";
    double assetsTotal = 0;
    double equityTotal = 0;
    double liabilityTotal = 0;
    double netIncomeTotal = 0;
    int numberOfAssetAccounts = ViewBag.numberOfAssetAccounts;
    int numberOfEquityAccounts = ViewBag.numberOfEquityAccounts;
    int numberOfLiabilityAccounts = ViewBag.numberOfLiabilityAccounts;
    double totalLiabilityAndEquity = 0;
    int count = 0;
}

<div class="text-center margin-top-120">
<h1 class="text-center mb-2"><span class="accent-color">@ViewBag.businessName</span></h1>
    <h2 class="text-center mb-2">Balance Sheet</h2>
    <h3 class="text-center mb-4">As of: <span class="accent-color">@ViewBag.Date</span></h3>
</div>
<div class="date-container">
    <form class="row g-3" asp-controller="Accounting" asp-action="BalanceAsOfDate" method="post">
        <div class="col-auto">
            <label for="date" class="mr-1 padding-top-3">As of Date:</label>
        </div>
        <div class="col-auto">
            <input type="date" class="form-control mr-1" id="date" name="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-outline-primary mb-2">Update Report</button>
        </div>
    </form>
</div>
<div class="table-wrapper">
    <table class="table table-striped">
        <thead class="table-top-row">
            <tr style="background-color: #fcb14f15; padding-left: 20px;">

                <th style="text-align:left; padding-left: 100px; font-weight: bold;">
                    Account:
                </th>
                <th style="text-align:center; font-weight: bold;">
                    <span style="padding: 30px;">Amount:</span><span style="margin-right:45px;">Total:</span>
                </th>

            </tr>
        </thead>

        <tbody>
            <tr>
                <td style="text-align:left;padding-left: 40px; font-weight:600; font-size:15px;">Assets</td>
                <td></td>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Asset"))
                {
                    <tr>
                        <td style="text-align:left;padding-left: 80px;">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td style="text-align:right;padding-right: 120px;">
                            @FormatNegativeDouble(((double)item.current_balance))
                        </td>
                        @{
                            assetsTotal += (double)item.current_balance;
                            count++;
                        }
                    </tr>
                    @if (count == numberOfAssetAccounts)
                    {
                        <tr>
                            <td style="text-align:left;padding-left: 25px; font-weight:600; font-size:15px; padding-top:10px;">Asset Total:</td>
                            <td style="text-align:right;padding-right:40px"><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(assetsTotal)</span></div></td>
                        </tr>
                        count = 0;
                    }
                }
            }

            <tr>
                <td style="text-align:left;padding-left: 45px; font-weight:600; font-size:15px;">Equity</td>
                <td></td>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Equity"))
                {
                    <tr>
                        <td style="text-align:left;padding-left: 80px;">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td style="text-align:right;padding-right: 120px;">
                            @FormatNegativeDouble(((double)item.current_balance))
                        </td>
                        @{
                            equityTotal += (double)item.current_balance;
                            count++;
                        }
                    </tr>
                    @if (count == numberOfEquityAccounts)
                    {
                        <tr>
                            <td style="text-align:left;padding-left: 25px; padding-top: 10px; font-weight: 600; font-size:15px ">Equity Total:</td>
                            <td style="text-align:right;padding-right:40px"><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(equityTotal)</span></div></td>
                        </tr>
                        count = 0;
                    }
                }
            }

            <tr>
                <td style="text-align:left;padding-left: 45px; font-size: 15px; font-weight: 600;">Liabilities</td>
                <td></td>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Liability"))
                {
                    <tr>
                        <td style="text-align:left;padding-left: 80px;">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td style="text-align:right;padding-right: 120px;">
                            @FormatNegativeDouble(((double)item.current_balance))
                        </td>
                        @{
                            liabilityTotal += (double)item.current_balance;
                            count++;
                        }
                    </tr>
                    @if (count == numberOfLiabilityAccounts)
                    {
                        <tr>
                            <td style="text-align:left;padding-left: 25px; padding-top: 10px; font-weight: 600; font-size:15px">Liabilities Total:</td>
                            <td style="text-align:right;padding-right:40px"><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(liabilityTotal)</span></div></td>
                        </tr>
                        count = 0;
                        totalLiabilityAndEquity = liabilityTotal + equityTotal;
                    }
                }
            }

            <tr>
                
                <td class="spanse" style="text-align:left;padding-left: 25px; padding-top:10px; font-weight:600; font-size:15px;">Total Liabilities and Equity</td>
  
                <td style="text-align:right;padding-right:40px"><div class="top-border"><br><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(totalLiabilityAndEquity)</span></div></td>
                
            </tr>
        </tbody>
    </table>
</div>

@functions {
    public static string FormatNegativeDouble(double? value)
    {
        if (value.HasValue)
        {
            Console.WriteLine($"Formatting value: {value}");
            if (value < 0)
            {
                return $"({Math.Abs(value.Value).ToString("C")})";
            }
            return value.Value.ToString("C");
        }
        return string.Empty;
    }
}
<style>
    .top-border{        
        border-top: 2.5px solid;        
        line-height:3px;
        
    }
    .total-text{
        line-height:20px;
        margin-top:5px;
        font-size: 14px;
        font-weight: 600;
        color: #cf8520 !important;
    }
    .spanse{
        width: 85vw;
    }
</style>