@using oa.Models;
@model IEnumerable<oa.Models.TrialBalanceModel>
@{
    ViewData["Title"] = "viewTrialBalance";
    double runningBalance = 0;
    double totalDebit = 0;
    double totalCredit = 0;
    string recentClosingOpeningDate = ViewBag.RecentOpeningClosingDate;
    string isAdjusting = ViewBag.isAdjusting;
    var message = ViewBag.Message;
    bool isAdjusted = false;
    string isAdjustedMesage = "(Unadjusted)";
    if(isAdjusting == "true")
    {
        isAdjustedMesage = "(Adjusted)";
    }

    string? asOfDate = ViewBag.asOfDate;
    string lastClosingDate = ViewBag.lastClosingDate;
}
<div class="text-center margin-top-120">
    <h1 class="text-center mb-2"><span class="accent-color">@ViewBag.businessName</span></h1>
    <h2 class="text-center mb-2">Trial Balance</h2>
    <h3 class="text-center mb-2">@isAdjustedMesage</h3>
    <h3 class="text-center mb-4">As of: <span class="accent-color">@ViewBag.titleDate </span></h3>
</div>

<div class="date-container">
    <form id="trialBalanceForm" class="row g-3 align-items-center" asp-controller="Accounting" asp-action="viewTrialBalance" method="post">
        <div class="col-auto">
            <label for="date" class="form-label m-0">As of Date:</label>
        </div>
        <div class="col-auto">
            <input type="date" class="form-control form-control-m mr-1" id="date" name="dateIn" value="@ViewBag.InputDate" required>
        </div>
        <div class="btn-group col-md-auto col-lg-auto col-xl-auto" role="group" aria-label="Adjusting Options">
            <input type="radio" class="btn-check" name="includeAdjusting" id="unadjusted" value="false" autocomplete="off">
            <label class="btn btn-outline-primary" for="unadjusted">Unadjusted</label>
            <input type="radio" class="btn-check" name="includeAdjusting" id="adjusted" value="true" autocomplete="off">
            <label class="btn btn-outline-primary" for="adjusted">Adjusted</label>
        </div>
        <a href="@Url.Action("GeneratePdf")" class="btn btn-secondary">Download PDF</a>
    </form>
</div>

<div class="table-wrapper">
    <table class="table table-striped">
        <thead class="table-top-row">
            <tr style="background-color: #fcb14f15; padding-left: 20px;">
                <th></th>
                <th style="text-align:left; font-weight: bold;">
                    @Html.DisplayNameFor(model => model.accountname)
                </th>
                <th></th>
                <th style="text-align:right; max-width: 100px; font-weight: bold;">
                    @Html.DisplayNameFor(model => model.debit)
                </th>
                <th style="text-align:right; max-width: 100px; font-weight: bold;">
                    @Html.DisplayNameFor(model => model.credit)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @{
                int counter = 1;
            }
            @foreach (var item in Model)
            {
                <tr style="padding-left: 20px;">
                    <td></td>
                    <td style="text-align:left;">
                        @item.accountname
                    </td>
                    <td></td>
                    <td style="text-align:right; max-width: 100px;">
                        @FormatNegativeDouble(item.debit)
                        @{
                            if (item.debit != 0)
                            {
                                runningBalance += item.debit.GetValueOrDefault();
                                totalDebit += item.debit.GetValueOrDefault();
                            }
                        }
                    </td>
                    <td style="text-align:right; max-width: 100px;">
                        @FormatNegativeDouble(item.credit)
                        @{
                            if (item.credit != 0)
                            {
                                runningBalance -= item.credit.GetValueOrDefault();
                                totalCredit += item.credit.GetValueOrDefault();
                            }
                        }
                    </td>
                    <td></td>
                </tr>
                @if (counter == Model.Count())
                {
                    <tr>
                        <td style="text-align:right;"></td>
                        <td style="text-align:right;"></td>
                        <td style="text-align:right; font-weight: 600; font-size: 15px;">Totals:</td>
                        <td style="text-align:right;"><div class="top-border"><br></div><span class="total-text">@FormatNegativeDouble((double?)totalDebit)</span><div class="top-border"><br></div><div class="top-border"><br></div></td>
                        <td style="text-align:right;"><div class="top-border"><br></div><span class="total-text">@FormatNegativeDouble((double?)totalCredit)</span><div class="top-border"><br></div><div class="top-border"><br></div></td>
                        <td style="text-align:right;"></td>
                    </tr>
                }
                counter = counter + 1;
            }
        </tbody>
    </table>
</div>
@if (message != "")
{
    <div class="warning-row-focus margin-top-20">
        <div class=" text-right" style="padding-left:10%; padding-right:10%;">
            <span class="text-center">@message</span>
        </div>
    </div>
}
@functions {
    public static string FormatNegativeDouble(double? value)
    {
        if (value.HasValue)
        {
            Console.WriteLine($"Formatting value: {value}");
            if (value < 0)
            {
                return $"({Math.Abs(value.Value).ToString("C")})";
            }
            return value.Value.ToString("C");
        }
        return string.Empty;
    }
}
@* Search and Filter *@
<script>
    document.getElementById('searchInput').addEventListener('keyup', function () {
        let input = this.value.toLowerCase();
        let rows = document.getElementById('tableBody').getElementsByTagName('tr');
        for (let i = 0; i < rows.length; i++) {
            let rowData = rows[i].getElementsByTagName('td');
            let match = false;
            for (let j = 0; j < rowData.length; j++) {
                if (rowData[j].innerText.toLowerCase().indexOf(input) > -1) {
                    match = true;
                    break;
                }
            }
            if (match) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('trialBalanceForm');
        const dateInput = form.querySelector('input[type="date"]');
        const radioButtons = form.querySelectorAll('input[type="radio"]');

        // Set the radio button based on ViewBag.isAdjusting
        const isAdjusting = "@ViewBag.isAdjusting";
        if (isAdjusting === "true") {
            document.getElementById('adjusted').checked = true;
        } else {
            document.getElementById('unadjusted').checked = true;
        }

        dateInput.addEventListener('focusout', function () {
            form.submit();
        });

        radioButtons.forEach(radio => {
            radio.addEventListener('click', function () {
                form.submit();
            });
        });
    });
</script>