@model IEnumerable<oa.Models.AccountsModel>
@{
    ViewData["Title"] = "viewOwnersEquity";
    double revenueTotal = 0;
    double expenseTotal = 0;
    double netIncomeTotal = 0;
    int numberOfRevenueAccounts = ViewBag.numberOfRevenueAccounts;
    int numberOfExpenseAccounts = ViewBag.numberOfExpenseAccounts;
    double startingBalance = (double)ViewBag.retainedEarningsStartingBalance;
    double dividends = (double)ViewBag.dividendsBalance;
    int count = 0;
}
<div class="text-center margin-top-120">
</div>
<h1 class="text-center mb-2"><span class="accent-color">@ViewBag.businessName</span></h1>
<h2 class="text-center mb-2">Owner's Equity</h2>
<h3 class="text-center mb-4">As of: <span class="accent-color">@ViewBag.Date</span></h3>
<div class="date-container">
    <form class="row g-3" asp-controller="Accounting" asp-action="BalanceAsOfDate" method="post">
        <div class="col-auto">
            <label for="date" class="mr-1 padding-top-3">As of Date:</label>
        </div>
        <div class="col-auto">
            <input type="date" class="form-control mr-1" id="date" name="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-outline-primary mb-2">Update Report</button>
        </div>
    </form>
</div>
<div class="table-wrapper">
    <table class="table table-striped">
        <thead class="table-top-row">
            <tr>
                <th style="text-align:left; padding-left: 65px; font-weight: 600; font-size: 17px;">
                    Account:                
                </th>
                 <th style="text-align:right; padding-right:50px; font-weight: 600; font-size: 17px;">
                    Total:
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Revenue"))
                {
                    revenueTotal += (double)item.current_balance;
                    count++;
                }
                if (count == numberOfRevenueAccounts)
                {                        
                    count = 0;                    
                }
            }
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Expense"))
                {
                    expenseTotal += (double)item.current_balance;
                    count++;
                }
                if (count == numberOfExpenseAccounts)
                {                           
                    count = 0;
                }
            }
            <tr></tr>
            <td style="text-align:left; padding-left: 25px; font-weight:600; font-size:15px;">Beginning Balance</td>
            <td style="text-align:right; padding-right:40px;">@FormatNegativeDouble(startingBalance)</td>
                @{
                    netIncomeTotal = revenueTotal - expenseTotal;
                }
            <tr></tr>
            <td style="text-align:left; padding-left: 40px;">Net Income Total</td>
            <td style="text-align:right; padding-right:40px;">@FormatNegativeDouble(netIncomeTotal)</td>

            <tr></tr>
            <td style="text-align:left; padding-left: 40px;">Dividends</td>
            <td style="text-align:right; padding-right:40px;">@FormatNegativeDouble(dividends)</td>
            @{
                netIncomeTotal -= dividends;
            }
            <tr>
            <td class="spanse" style="text-align:left; padding-left: 25px; font-weight:600; font-size: 15px; padding-top:10px;">Ending Balance:</td>
            <td style="text-align:right; padding-right:40px;"><div class="top-border"><br></div><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(netIncomeTotal)</span></div></td>
            </tr>
        </tbody>
    </table>
</div>

@functions {
    public static string FormatNegativeDouble(double? value)

    {

        if (value.HasValue)

        {

            Console.WriteLine($"Formatting value: {value}");

            if (value < 0)

            {

                return $"({Math.Abs(value.Value).ToString("C")})";

            }

            return value.Value.ToString("C");

        }

        return string.Empty;

    }
}