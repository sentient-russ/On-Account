@model IEnumerable<oa.Models.AccountsModel>
@{
    ViewData["Title"] = "viewIncomeStatement";
    double revenueTotal = 0;
    double expenseTotal = 0;
    double netIncomeTotal = 0;
    int numberOfRevenueAccounts = ViewBag.numberOfRevenueAccounts;
    int numberOfExpenseAccounts = ViewBag.numberOfExpenseAccounts;
    int count = 0;
}
<div class="text-center margin-top-120">
    <h1 class="text-center mb-2"><span class="accent-color">@ViewBag.businessName</span></h1>
    <h2 class="text-center mb-2">Income Statement</h2>
    <h3 class="text-center mb-4">As of: <span class="accent-color">@ViewBag.Date</span></h3>
</div>
<div class="date-container">
    <form class="row g-3" asp-controller="Accounting" asp-action="BalanceAsOfDate" method="post">
        <div class="col-auto">
            <label for="date" class="mr-1 padding-top-3">As of Date:</label>
        </div>
        <div class="col-auto">
            <input type="date" class="form-control mr-1" id="date" name="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-outline-primary mb-2">Update Report</button>
        </div>
    </form>
</div>
<div class="table-wrapper">
    <table class="table table-striped">
        <thead class="table-top-row">
            <tr style="background-color: #fcb14f15; padding-left: 20px;">
                <th style="text-align:left; padding-left: 100px; font-weight: bold;">
                    Account:
                </th>
                <th style="text-align:center; font-weight: bold;">
                    <span style="padding: 30px;">Amount:</span><span style="margin-right:45px;">Total:</span>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left; padding-left: 42px; font-weight:600;font-size:15px">Revenues</td>
                <td></td>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Revenue"))
                {
                    <tr>
                        <td style="text-align:left; padding-left: 80px;">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td style="text-align:right; padding-right: 120px;">
                            @FormatNegativeDouble(((double)item.current_balance))
                        </td>
                        @{
                            revenueTotal += (double)item.current_balance;

                            count++;
                        }
                    </tr>
                    @if (count == numberOfRevenueAccounts)
                    {
                        <tr>
                            <td style="text-align:left; padding-left: 25px; font-weight: 600; font-size: 15px; padding-top: 10px;">Revenue Total:</td>
                            <td style="text-align:right; font-weight: bold; padding-right:40px;"><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(revenueTotal)</span></div></td>
                            @{
                                count = 0;
                            }
                        </tr>
                    }
                }
            }
            <tr>
                <td style="text-align:left; padding-left: 40px; font-weight:600;font-size:15px;padding-top:10px;">Expenses</td>
                <td></td>
            </tr>
            @foreach (var item in Model)
            {
                @if (item.type.Equals("Expense"))
                {
                    <tr>
                        <td style="text-align:left; padding-left: 80px;">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td style="text-align:right; padding-right: 120px;">
                            @FormatNegativeDouble(((double)item.current_balance))
                        </td>
                        @{
                            expenseTotal += (double)item.current_balance;
                            count++;
                        }
                    </tr>
                    @if (count == numberOfExpenseAccounts)
                    {
                        <tr>
                            <td style="text-align:left; padding-left: 25px; font-weight: 600; font-size:15px; padding-top: 10px;">Expense Total:</td>
                            <td style="text-align:right; font-weight: bold; padding-right:40px;"><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(expenseTotal)</span></div></td>
                            @{
                                count = 0;
                            }
                        </tr>
                    }
                }
            }
            @{
                netIncomeTotal = revenueTotal - expenseTotal;
            }
            <tr>
                <td class="spanse" style="text-align:left;padding-left: 40px; font-weight:600; font-size:15px;padding-top:10px;">Net Income Total:</td>
                <td style="text-align:right; padding-right:40px;"><div class="top-border"><br></div><div class="top-border"><br><span class="total-text">@FormatNegativeDouble(netIncomeTotal)</span></div></td>
            </tr>
        </tbody>
    </table>
</div>

@functions {
    public static string FormatNegativeDouble(double? value)
    {
        if (value.HasValue)
        {
            Console.WriteLine($"Formatting value: {value}");
            if (value < 0)
            {
                return $"({Math.Abs(value.Value).ToString("C")})";
            }
            return value.Value.ToString("C");
        }
        return string.Empty;
    }
}