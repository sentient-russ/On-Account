function createNewLineItem(t, e) { const n = document.createElement("div"); n.className = "row g-1 journal-item-row", n.setAttribute("data-transaction", t), n.setAttribute("data-line", e); const a = document.querySelector(`#dr-account[data-transaction="${t}"][data-line="2"]`), o = document.querySelector(`#cr-account[data-transaction="${t}"][data-line="2"]`), c = a ? a.innerHTML : "", r = o ? o.innerHTML : ""; return n.innerHTML = `\n            <div class="col-md-3">\n                <select class="form-select form-control-sm" data-transaction="${t}" data-line="${e}" id="dr-account">\n                    ${c}\n                </select>\n            </div>\n            <div class="col-md-3">\n                <select class="form-select form-control-sm" data-transaction="${t}" data-line="${e}" id="cr-account">\n                    ${r}\n                </select>\n            </div>\n            <div class="col-md-1">\n                <div class="">\n                    <input type="number" class="form-control muted" data-transaction="${t}" data-line="${e}" id="post-ref" readonly>\n                </div>\n            </div>\n            <div class="col-md-2">\n                <div class="text-center">\n                    <input class="form-control text-end currencyField" value="$0.00" data-transaction="${t}" data-line="${e}" id="dr-amount" />\n                </div>\n            </div>\n            <div class="col-md-2">\n                <div class="">\n                    <input class="form-control text-end currencyField" value="$0.00" data-transaction="${t}" data-line="${e}" id="cr-amount" />\n                </div>\n            </div>\n            <div class="col-00">\n                <div class="add-new-line btn btn-outline-primary"  data-transaction="${t}" data-line="${e}" id="add-new-line">\n                    <span class="btn-symbol">+</span>\n                </div>\n                <div class="remove-new-line btn btn-outline-danger" data-transaction="${t}" data-line="${e}" id="remove-new-line">\n                    <span class="btn-symbol">-</span>\n                </div>\n            </div>\n        `, n } function addNewLine(t, e) { const n = e.getAttribute("data-line"), a = createNewLineItem(t, parseInt(n) + 1); e.insertAdjacentElement("afterend", a), addCrTotallisteners(), addDrTotallisteners(), accountSelectionListeners(), toggleButtonStates(t), adjustAccountsSelectionOptions() } function toggleButtonStates(t) { const e = document.querySelectorAll(`.journal-item-row[data-transaction="${t}"]`); e.forEach(((t, n) => { const a = t.querySelector(".add-new-line"), o = t.querySelector(".remove-new-line"); if (a) { n <= e.length - 2 ? (a.classList.add("btn-disabled"), o.classList.add("btn-disabled")) : (a.classList.remove("btn-disabled"), o.classList.remove("btn-disabled")) } })) } function formatCurrency() { document.querySelectorAll(".currencyField").forEach((function (t) { document.querySelectorAll(".currencyField").forEach((t => { t.target; let e = t.value.trim(); e = e.replace(/[^0-9.]/g, ""); let n = e.split("."), a = n[0], o = n[1] ? n[1].substring(0, 2) : ""; var c = parseInt(a, 10); isNaN(c) && (c = 0), a = c.toString(), a = a.replace(/\B(?=(\d{3})+(?!\d))/g, ","); let r = a; r = r.length >= 1 ? "$" + r : "$0"; let l = ""; "" === o ? l = ".00" : 1 == o.length ? l = "." + o + "0" : 2 == o.length ? l = "." + o : o.length > 2 && (l = "." + o.substring(0, 2)), r += l, t.value = r })) })) } function formatCurrencyOnLoad() { document.querySelectorAll(".currencyField").forEach((t => { t.target; let e = t.value.trim(); e = e.replace(/[^0-9.]/g, ""); let n = e.split("."), a = n[0], o = n[1] ? n[1].substring(0, 2) : ""; var c = parseInt(a, 10); isNaN(c) && (c = 0), a = c.toString(), a = a.replace(/\B(?=(\d{3})+(?!\d))/g, ","); let r = a; r = r.length >= 1 ? "$" + r : "$0"; let l = ""; "" === o ? l = ".00" : 1 == o.length ? l = "." + o + "0" : 2 == o.length ? l = "." + o : o.length > 2 && (l = "." + o.substring(0, 2)), r += l, t.value = r })) } function addCurrencyFieldListeners() { document.querySelectorAll(".currencyField").forEach((function (t) { t.addEventListener("fousout", (function (t) { let e = t.target, n = e.value.trim(); n = n.replace(/[^0-9.]/g, ""); let a = n.split("."), o = a[0], c = a[1] ? a[1].substring(0, 2) : ""; var r = parseInt(o, 10); isNaN(r) && (r = 0), o = r.toString(), o = o.replace(/\B(?=(\d{3})+(?!\d))/g, ","); let l = o; l = l.length >= 1 ? "$" + l : "$0"; let d = ""; "" === c ? d = ".00" : 1 == c.length ? d = "." + c + "0" : 2 == c.length ? d = "." + c : c.length > 2 && (d = "." + c.substring(0, 2)), l += d, e.value = l })) })) } function currencyToFloat(t) { return parseFloat(t.replace(/[$,]/g, "")) } function updateCrTotals() { const t = document.querySelectorAll('[id="cr-amount"]'), e = {}; t.forEach((t => { const n = t.getAttribute("data-transaction"), a = currencyToFloat(t.value); e[n] || (e[n] = 0), e[n] += a })); for (const t in e) { var n = e[t]; const a = document.querySelector(`[id="cr-total"][data-transaction="${t}"]`); n = n.toString(), a.value = n, formatCurrency() } formatCurrency() } function addCrTotallisteners() { document.querySelectorAll('[id="cr-amount"]').forEach((t => { t.addEventListener("focusout", updateCrTotals) })) } function updateDrTotals() { const t = document.querySelectorAll('[id="dr-amount"]'), e = {}; t.forEach((t => { const n = t.getAttribute("data-transaction"), a = currencyToFloat(t.value); e[n] || (e[n] = 0), e[n] += a })); for (const t in e) { var n = e[t]; const a = document.querySelector(`[id="dr-total"][data-transaction="${t}"]`); console.log(n), n = n.toString(), console.log(n), a.value = n, formatCurrency() } formatCurrency() } function addDrTotallisteners() { document.querySelectorAll('[id="dr-amount"]').forEach((t => { t.addEventListener("focusout", updateDrTotals) })) } function accountSelectionListeners() { document.querySelectorAll('select[id^="dr-account"], select[id^="cr-account"]').forEach((function (t) { t.addEventListener("change", (function (t) { const e = t.target, n = e.getAttribute("data-transaction"), a = e.getAttribute("data-line"); if (e.style.backgroundColor = "white", e.style.color = "black", e.id.startsWith("dr-account")) { const t = document.querySelector(`#cr-account[data-transaction="${n}"][data-line="${a}"]`), e = document.querySelector(`#cr-amount[data-transaction="${n}"][data-line="${a}"]`), o = document.querySelector(`#dr-amount[data-transaction="${n}"][data-line="${a}"]`); t && (t.value = "unselected", t.style.backgroundColor = "#6c757d0b", t.style.color = "#6c757d", e && (e.value = "$0.00", e.style.backgroundColor = "#6c757d0b", e.style.color = "#6c757d", e.readOnly = !0)), o && (o.readOnly = !1, o.style.backgroundColor = "white", o.style.color = "black") } else if (e.id.startsWith("cr-account")) { const t = document.querySelector(`#dr-account[data-transaction="${n}"][data-line="${a}"]`), e = document.querySelector(`#dr-amount[data-transaction="${n}"][data-line="${a}"]`), o = document.querySelector(`#cr-amount[data-transaction="${n}"][data-line="${a}"]`); t && (t.value = "unselected", t.style.backgroundColor = "#6c757d0b", t.style.color = "#6c757d", e && (e.value = "$0.00", e.style.backgroundColor = "#6c757d0b", e.style.color = "#6c757d", e.readOnly = !0)), o && (o.readOnly = !1, o.style.backgroundColor = "white", o.style.color = "black") } })) })) } function adjustAccountsSelectionOptions() { const t = document.querySelectorAll('select[id^="dr-account"], select[id^="cr-account"]'); var e = new Set; function n() { e = new Set, t.forEach((t => { const n = t.value; e.add(n) })) } t.forEach((a => { a.addEventListener("change", (function () { const a = this.value; e.has(a) ? e.delete(a) : e.add(a), n(), t.forEach((t => { const n = t.options; for (let t = 0; t < n.length; t++) { const a = n[t]; e.has(a.value) && "unselected" !== a.value ? a.classList.add("hidden") : a.classList.remove("hidden") } })), n() })) })) } document.getElementById("transaction-upload").addEventListener("change", (function (t) { const e = t.target, n = e.files[0] ? e.files[0].name : "Supporting Document", a = "https://on-account.net/uploaded_docs/" + n; document.getElementById("file-link").innerHTML = `<a href="${a}" target="_blank">${n}</a>` })), document.addEventListener("DOMContentLoaded", (function () { document.getElementById("save_journal_btn").addEventListener("click", (function (e) { e.preventDefault(); var n = document.getElementById("save_journal_btn"), a = document.getElementById("journal_reset_btn"), o = document.getElementById("journal_back_btn"), c = document.getElementById("journal_reset_href"), r = document.getElementById("journal_back_href"); if (n.classList.add("disabled"), a.classList.add("disabled"), o.classList.add("disabled"), c.classList.add("disabled"), r.classList.add("disabled"), function () { var e = ""; const n = document.getElementById("dr-total"), a = document.getElementById("cr-total"), o = document.getElementById("transaction-date"); var c = new Date; c.setHours(0, 0, 0, 0); var r = new Date(o.value); const l = document.querySelector('#dr-account[data-transaction="1"][data-line="1"]'); document.querySelector('#cr-account[data-transaction="1"][data-line="2"]'); n.value != a.value ? e += "The total debits must equal the total credits.\n" : "$0.00" == n.value || "$0.00" == a.value ? e += "The transaction total must be greater than $0.00.\n" : r > c ? e += "The transaction date cannot be in the future.\n" : "unselected" === l.value && (e += "The first journal line must have a debit account selected.\n"); const d = new Set; return document.querySelectorAll('select[id^="dr-account"], select[id^="cr-account"]').forEach((t => { const n = t.value; "unselected" !== n && (d.has(n) ? e += `Account ${n} is used more than once.\n` : d.add(n)) })), t.innerHTML = e, "" == e }()) { const t = function () { const t = { journal_id: document.getElementById("journal-id").value, user_name: document.getElementById("created-by").value, journal_date: document.getElementById("journal-date").value, journal_total: parseFloat(document.getElementById("journal-total-amount").value), journal_status: document.getElementById("journal-status").value, journal_notes: document.getElementById("journal-description").value, is_adjusting: document.getElementById("is-adjusting").checked, transactions: [] }, e = document.querySelectorAll(".transaction-container"); return e.forEach((e => { const n = e.getAttribute("data-transaction"), a = { data_transaction: n, transaction_description: document.querySelector(`#transaction-description[data-transaction="${n}"]`).value, transaction_date: document.querySelector(`#transaction-date[data-transaction="${n}"]`).value, transaction_upload: document.querySelector(`#transaction-upload[data-transaction="${n}"]`).value, line_items: [] }; e.querySelectorAll(`.journal-item-row[data-transaction="${n}"]`).forEach((t => { const e = t.getAttribute("data-line"); if (e) { const t = { line: e, dr_account: document.querySelector(`#dr-account[data-transaction="${n}"][data-line="${e}"]`).value, cr_account: document.querySelector(`#cr-account[data-transaction="${n}"][data-line="${e}"]`).value, post_ref: document.querySelector(`#post-ref[data-transaction="${n}"][data-line="${e}"]`).value, dr_amount: parseFloat(document.querySelector(`#dr-amount[data-transaction="${n}"][data-line="${e}"]`).value.replace("$", "").replace(/,/g, "")), cr_amount: parseFloat(document.querySelector(`#cr-amount[data-transaction="${n}"][data-line="${e}"]`).value.replace("$", "").replace(/,/g, "")) }; a.line_items.push(t) } })), t.transactions.push(a) })), t }(); console.log(t); const e = JSON.stringify(t), n = new FormData; n.append("journalData", e); document.querySelectorAll(".transaction-container").forEach(((t, e) => { const a = t.querySelector("#transaction-upload"); if (a && a.files.length > 0) for (let t = 0; t < a.files.length; t++)n.append(`transactionUpload_${e}_${t}`, a.files[t]) })), fetch("/api/journal", { method: "POST", body: n }).then((t => t.json())).then((t => { console.log("Response:", t), "Journal data received successfully" === t.message ? window.location.href = "/Accounting/" : console.error("Unexpected response:", t) })).catch((t => console.error("Error:", t))), console.log(n) } else n.classList.remove("disabled"), a.classList.remove("disabled"), o.classList.remove("disabled"), c.classList.remove("disabled"), r.classList.remove("disabled") })); var t = document.getElementById("journal_validation") })), document.addEventListener("click", (function (t) { if (t.target.closest(".add-new-line")) { const e = t.target.closest(".journal-item-row"); addNewLine(e.getAttribute("data-transaction"), e) } else if (t.target.closest(".remove-new-line")) { const e = t.target.closest(".journal-item-row"); if ("2" !== e.getAttribute("data-line")) { e.remove(), addCrTotallisteners(), addDrTotallisteners(), accountSelectionListeners(); toggleButtonStates(e.getAttribute("data-transaction")) } updateDrTotals(), updateCrTotals(), adjustAccountsSelectionOptions() } })), document.addEventListener("DOMContentLoaded", (function () { accountSelectionListeners(), addCrTotallisteners(), addDrTotallisteners(), formatCurrencyOnLoad(), updateDrTotals(), updateCrTotals(), accountSelectionListeners(), adjustAccountsSelectionOptions() })), adjustAccountsSelectionOptions();